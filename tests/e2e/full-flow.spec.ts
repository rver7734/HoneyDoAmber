import { test, expect } from '@playwright/test';
import { appendFile, mkdir } from 'node:fs/promises';
import { dirname } from 'node:path';

const smartInputTemplate = (task: string) => `Amber, please remind me to ${task} tomorrow at 3pm`;

const randomCredential = () => {
  const randomSuffix = Math.random().toString(36).slice(2, 10);
  return {
    email: `playwright-${randomSuffix}@example.com`,
    password: `Playwright!${randomSuffix}`,
  };
};

const LOG_PATH = 'test-results/e2e-run.log';

async function log(message: string) {
  const timestamp = new Date().toISOString();
  const line = `[${timestamp}] ${message}`;
  console.log(line);
  await mkdir(dirname(LOG_PATH), { recursive: true });
  await appendFile(LOG_PATH, `${line}\n`);
}

const futureDate = (): string => {
  const date = new Date();
  date.setDate(date.getDate() + 1);
  return date.toISOString().split('T')[0];
};

const futureTime = (): string => {
  const date = new Date();
  date.setHours(date.getHours() + 2, 0, 0, 0);
  return date.toTimeString().slice(0, 5);
};

test('HoneyDo by Amber – full reminder lifecycle', async ({ page }) => {
  const creds = randomCredential();
  const timestamp = Date.now();
  const taskTitle = `Playwright reminder ${timestamp}`;
  const reminderDetails = `Auto-generated by Playwright at ${new Date(timestamp).toISOString()}`;

  await test.step('Create a new account and log in', async () => {
    await log('Navigating to /login');
    await page.goto('/login');
    await page.waitForLoadState('networkidle');

    if (new URL(page.url()).pathname !== '/login') {
      await page.waitForURL('**/login', { timeout: 15000 });
    }

    // Switch to sign-up mode
    await log('Switching to sign-up form');
    await page.getByTestId('auth-toggle').click();
    await expect(page.getByTestId('auth-submit')).toHaveText('Sign Up', { timeout: 5000 });
    await expect(page.getByTestId('auth-toggle')).toHaveText('Login');

    // Register a fresh account
    await log(`Signing up with ${creds.email}`);
    await page.getByTestId('auth-email').fill(creds.email);
    await page.getByTestId('auth-password').fill(creds.password);
    await page.getByTestId('auth-submit').click();

    const signUpToast = page.getByText('Sign up successful!', { exact: true }).first();
    await expect(signUpToast).toBeVisible({ timeout: 20000 });

    // Return to login mode with the new credentials prepped
    await log('Switching back to login form');
    await page.getByTestId('auth-toggle').click();
    await expect(page.getByTestId('auth-submit')).toHaveText('Login', { timeout: 5000 });
    await expect(page.getByTestId('auth-toggle')).toHaveText('Sign Up');

    await log('Logging in with newly created credentials');
    await page.getByTestId('auth-email').fill(creds.email);
    await page.getByTestId('auth-password').fill(creds.password);

    await Promise.all([
      page.waitForURL((url) => new URL(url).pathname === '/', { timeout: 20000 }),
      page.getByTestId('auth-submit').click(),
    ]);

    await page.waitForSelector('[data-testid="smart-input-field"]', { timeout: 20000 });
    await log('Login confirmed – landed on dashboard');
  });

  await test.step('Use the smart input to start a new reminder', async () => {
    await log('Creating reminder via smart input');
    const smartInput = page.getByTestId('smart-input-field');
    await smartInput.click();
    await smartInput.fill(smartInputTemplate(taskTitle));

    await Promise.all([
      page.waitForURL('**/add**', { timeout: 20000 }),
      page.getByTestId('smart-input-submit').click(),
    ]);
    await log('Navigated to /add with smart input results');
  });

  await test.step('Review, make it recurring, and submit the pre-filled reminder form', async () => {
    await log('Verifying reminder form defaults');
    await expect(page.getByTestId('reminder-form-task')).toHaveValue(/Playwright reminder/, { timeout: 15000 });

    await page.getByTestId('reminder-form-details').fill(reminderDetails);
    await page.getByTestId('reminder-form-date').fill(futureDate());
    await page.getByTestId('reminder-form-time').fill(futureTime());

    await log('Enabling weekly recurrence on Monday/Wednesday');
    await page.getByTestId('recurrence-toggle').click();
    await page.getByTestId('recurrence-frequency-trigger').click();
    await page.getByTestId('recurrence-option-weekly').click({ timeout: 15000 });
    await page.getByTestId('recurrence-day-1').click();
    await page.getByTestId('recurrence-day-3').click();

    await Promise.all([
      page.waitForURL((url) => new URL(url).pathname === '/', { timeout: 20000 }),
      page.getByTestId('reminder-form-submit').click(),
    ]);
    await log('Reminder form submitted; returned to dashboard');
  });

  let reminderId: string | null = null;

  await test.step('Verify reminder appears on Upcoming list', async () => {
    await log('Confirming reminder presence on upcoming list');
    const reminderCard = page.locator('[data-testid="reminder-card"]').filter({ hasText: taskTitle });
    await expect(reminderCard).toBeVisible({ timeout: 20000 });
    await expect(reminderCard).toContainText('Repeats next:', { timeout: 5000 });
    await expect(reminderCard).toContainText('Wed', { timeout: 5000 });

    reminderId = await reminderCard.getAttribute('data-reminder-id');
    expect(reminderId, 'reminder id should be captured from upcoming card').toBeTruthy();
    await log(`Captured reminder id: ${reminderId}`);
  });

  await test.step('Open bark detail view for the reminder', async () => {
    await log('Navigating to bark detail view');
    await page.goto(`/bark/${reminderId}`);
    await expect(page.getByText(taskTitle, { exact: true })).toBeVisible({ timeout: 20000 });
    await expect(page.getByText(`Reminder ID: ${reminderId}`)).toBeVisible({ timeout: 20000 });
    await log('Bark detail confirmed');
  });

  await test.step('Mark the reminder complete and confirm recurrence toast', async () => {
    await log('Marking reminder complete');
    await page.getByRole('button', { name: 'Mark Complete' }).click();
    await expect(page.getByText('Repeated reminder scheduled', { exact: false })).toBeVisible({ timeout: 20000 }).catch(() =>
      expect(page.getByText('Reminder Added!', { exact: false })).toBeVisible({ timeout: 20000 })
    );
    await log('Recurrence toast confirmed');
  });

  await test.step('Return to dashboard and clean up reminder', async () => {
    await log('Returning to dashboard to remove reminder');
    await page.goto('/');
    await page.waitForSelector('[data-testid="smart-input-field"]', { timeout: 20000 });

    const recurringCard = page.locator('[data-testid="reminder-card"]').filter({ hasText: taskTitle });
    await expect(recurringCard).toBeVisible({ timeout: 20000 });

    page.once('dialog', (dialog) => dialog.accept());
    await recurringCard.locator('[data-testid="reminder-delete-button"]').click();

    await expect(page.locator('[data-testid="reminder-card"]').filter({ hasText: taskTitle })).toHaveCount(0, {
      timeout: 20000,
    });
    await log('Recurring reminder removed from dashboard');
  });
});
